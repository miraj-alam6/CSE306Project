Overview:

In this project, we created a Callout class which would be the facility. In it we created a CalloutwithTime class which would be the object holding the runnable
and the time of the system in ticks where the thread should call the run method of the runnable after being scheduled. In exercise 1, we created sleepThread(int ticks)
to put the thread to sleep and have it reawaken after a certain number of ticks. Here we just used a semaphore to put the thread to sleep before the method ended after scheduling the callout.
When the callout arrives, it will call the run method and it would do S.V() to make the thread reawaken.

In exercise 2, we made a synchronousQueue with the basic functions of put and take and offer and poll. Here, we only had to test put and take. Everytime, a thread calls put we will do .P()
on a the consumer Semaphore so that it will wait until there is a consumer. For take, we did .P() on the producer semaphore so it will wait until there's a producer thread. We also had producerLock
and consumerLock semaphores respectively in order to avoid two concurrent calls to put or take to affect each other's values. 

In exercise 3, we made an offer and poll that has a timeout where it will wait for a certain amount of time before failing. The idea here is that it is essentially a put and take that does
not infinitely wait until there's a producer/consumer thread trying to take. Here we used the callout facility to schedule a callout where it will end the offer/poll thread when the scheduled
time comes


How to compile:

We made three different test drivers. One is CalloutTest.java, one is SynchronousQueueTest.java, and one is POCTest.java which are all in nachos.kernel.threads.test. POCTest.java tests the
offer and poll with timeout while SynchronousQueueTest tests the put and take methods of a SynchronousQueue. CalloutTest tests the sleepthread method that we had to create for exercise 1.
To test these classes, we made in scheduler a Callout and a SynchronousQueue of integers when the scheduler is initialized. In order to have print statements for the code we wrote, use the argument 
z when compiling and running. In order to switch between the tests, you just have to set the value of each respective option in Options.java which is in the nachos package to true and 
set the others to false. 

Currently the option for callout_test is set to true.


We assume that the machine would be restarted between tests and we assume that scheduler would always be used. 